// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DogTrack.DataAccess.DogTrackDataAccess.Entities;

public partial class XSdbContext : DbContext
{
    public XSdbContext(DbContextOptions<XSdbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AvailableBet> AvailableBets { get; set; }

    public virtual DbSet<BetType> BetTypes { get; set; }

    public virtual DbSet<InvalidTicket> InvalidTickets { get; set; }

    public virtual DbSet<Participant> Participants { get; set; }

    public virtual DbSet<Race> Races { get; set; }

    public virtual DbSet<RaceParticipant> RaceParticipants { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TicketBet> TicketBets { get; set; }

    public virtual DbSet<TicketStatus> TicketStatuses { get; set; }

    public virtual DbSet<WonTicket> WonTickets { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK_AccountLinkId");

            entity.ToTable("Account", "Customer");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AvailableBet>(entity =>
        {
            entity.ToTable("AvailableBet", "BET");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Odds).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.BetType).WithMany(p => p.AvailableBets)
                .HasForeignKey(d => d.BetTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BetType");

            entity.HasOne(d => d.RaceParticipant).WithMany(p => p.AvailableBets)
                .HasForeignKey(d => d.RaceParticipantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RaceParticipant");
        });

        modelBuilder.Entity<BetType>(entity =>
        {
            entity.HasKey(e => e.BetTypeId).HasName("PK_BetTypeId");

            entity.ToTable("BetType", "BET");

            entity.Property(e => e.BetTypeDesc)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
        });

        modelBuilder.Entity<InvalidTicket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("InvalidTIckets", "BET");

            entity.Property(e => e.BetAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TicketId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Participant>(entity =>
        {
            entity.HasKey(e => e.ParticipantId).HasName("PK_ParticipantId");

            entity.ToTable("Participant", "Race");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Race>(entity =>
        {
            entity.HasKey(e => e.RaceId).HasName("PK_AccountLinkId");

            entity.ToTable("Race", "Race");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RaceStart).HasColumnType("datetime");
        });

        modelBuilder.Entity<RaceParticipant>(entity =>
        {
            entity.ToTable("RaceParticipant", "Race");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");

            entity.HasOne(d => d.Participant).WithMany(p => p.RaceParticipants)
                .HasForeignKey(d => d.ParticipantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Participant");

            entity.HasOne(d => d.Race).WithMany(p => p.RaceParticipants)
                .HasForeignKey(d => d.RaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Race");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.TicketId).HasName("PK_AccountLinkId");

            entity.ToTable("Ticket", "BET");

            entity.Property(e => e.BetAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.WinAmount).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<TicketBet>(entity =>
        {
            entity.ToTable("TicketBet", "BET");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.Odds).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.AvailableBet).WithMany(p => p.TicketBets)
                .HasForeignKey(d => d.AvailableBetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AvailableBet");

            entity.HasOne(d => d.Ticket).WithMany(p => p.TicketBets)
                .HasForeignKey(d => d.TicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketId");
        });

        modelBuilder.Entity<TicketStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TicketStatus", "BET");

            entity.Property(e => e.Created)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.LastUpd)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .HasDefaultValueSql("(suser_sname())");
            entity.Property(e => e.TicketStatusDesc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<WonTicket>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WonTickets", "BET");

            entity.Property(e => e.TicketId).ValueGeneratedOnAdd();
            entity.Property(e => e.WinAmount).HasColumnType("decimal(18, 0)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}